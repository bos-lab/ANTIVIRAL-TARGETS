FEATS = ["CDS", "rRNA", "tRNA", "exon", "gene", "transcript"]

#rule sra_prefetch:
#    output:
#        "raw_crr/{crr}.sra"
#    params:
#        "{crr} --max-size 50GB -O raw_crr/"
#    log:
#        "raw_crr/{crr}_prefetch.log"
#    shell:
#        """
#        prefetch {params} > {log} 2>&1
#        """
#
#rule fastqdump:
#    input:
#        "raw_crr/{crr}.sra"
#    output:
#        expand("raw_crr/{{crr}}{ext}", ext=["_pass_1.fastq.gz", "_pass_2.fastq.gz"])
#    log:
#        "raw_crr/{crr}.log"
#    shell:
#        """
#        fastq-dump --gzip --clip --read-filter pass --outdir raw_crr/ --skip-technical --split-3 {input} > {log} 2>&1 
#        """
#
#
#rule single_fastqdump:
#    input:
#        "raw_crr/{crr}.sra"
#    output:
#       "raw_crr/{crr}_pass.fastq.gz"
#    log:
#        "raw_crr/{crr}.log"
#    shell:
#        """
#        fastq-dump --gzip --clip --read-filter pass --outdir raw_crr/ --skip-technical --split-3 {input} > {log} 2>&1 
#        """

rule paired_reads_qc:
    input:
        fq1 = "raw_crr/{crr}_pass_1.fastq.gz",
        fq2 = "raw_crr/{crr}_pass_2.fastq.gz",
    output:
        expand("qc_reads/{{crr}}/QC{ext}", ext=[".1.trimmed.fastq", ".2.trimmed.fastq"])
    params:
        dir="qc_reads/{crr}"
    threads: 12
    run:
        shell("FaQCs -min_L 50 -n 50 -t {threads} -d {params.dir} -1 {input.fq1} -2 {input.fq2}")

rule single_reads_qc:
    input:
        fq = "raw_crr/{crr}_pass.fastq.gz"
    output:
        "qc_reads/{crr}/QC.unpaired.trimmed.fastq"
    params:
        dir="qc_reads/{crr}"
    threads: 12
    run:
        shell("FaQCs -min_L 50 -n 50 -t {threads} -d {params.dir} -u {input.fq}")

rule paired_read_map:
    input:
        fq1 = "qc_reads/{crr}/QC.1.trimmed.fastq",
        fq2 = "qc_reads/{crr}/QC.2.trimmed.fastq",
    output:
         "mapped_reads/{crr}_paired.bam"
    params:
        idx = "/panfs/biopan04/scratch-migun/ANTIVIRAL-TARGETS/data/grch38/genome"
    threads: 12
    shell:
        "hisat2 -p {threads} -x {params.idx} -1 {input.fq1} -2 {input.fq2} |  samtools view -Sbh -o {output} "


rule single_read_map:
    input:
        fq = "qc_reads/{crr}/QC.unpaired.trimmed.fastq",
    output:
         "mapped_reads/{crr}_unpaired.bam"
    params:
        idx = "/panfs/biopan04/scratch-migun/ANTIVIRAL-TARGETS/data/grch38/genome"
    threads: 12
    shell:
        "hisat2 -p {threads} -x {params.idx} -U {input.fq}|  samtools view -Sbh -o {output} "


rule single_fcount_genes:
    input:
        "mapped_reads/{crr}_unpaired.bam"
    output:
        "fcount_dir/{crr}_unpaired_fcount.tsv"
    params:
        gtf = "/panfs/biopan04/scratch-migun/ANTIVIRAL-TARGETS/data/genome.gtf"
    shell:
        "featureCounts -a {params.gtf} -s 0 -g gene_id -t gene -o {output} {input}"

rule fcount_genes:
    input:
        "mapped_reads/{crr}_paired.bam"
    output:
        "fcount_dir/{crr}_gene_fcount.tsv"
    params:
        gtf = "/panfs/biopan04/scratch-migun/ANTIVIRAL-TARGETS/data/genome.gtf"
    shell:
        "featureCounts -a {params.gtf} -g gene_id -t gene -o {output} {input}"

rule calc_tpm:
    input:
        "fcount_dir/{crr}_gene_fcount.tsv"
    output:
        "tpms/{crr}_gene_tpm.tsv"
    shell:
        "python /panfs/biopan04/scratch-migun/ANTIVIRAL-TARGETS/scripts/rna-score-calc.py tpm -i {input} -o {output}"

rule single_calc_tpm:
    input:
        "fcount_dir/{crr}_unpaired_fcount.tsv"
    output:
        "tpms/{crr}_unpaired_tpm.tsv"
    shell:
        "python /panfs/biopan04/scratch-migun/ANTIVIRAL-TARGETS/scripts/rna-score-calc.py tpm -i {input} -o {output}"

# Replace full path with YML files
