FEATS = ["CDS", "rRNA", "tRNA", "exon", "gene", "transcript"]

rule sra_prefetch:
    output:
        "raw_srr/{srr}.sra"
    params:
        "{srr} --max-size 50GB -O raw_srr/"
    log:
        "raw_srr/{srr}_prefetch.log"
    shell:
       """
        if [ ! -f {output} ]; then
            prefetch {params} > {log} 2>&1
        fi
        """

rule fastqdump:
    input:
        "raw_srr/{srr}.sra"
    output:
        expand("raw_srr/{{srr}}{ext}", ext=["_pass_1.fastq.gz", "_pass_2.fastq.gz"])
    log:
        "raw_srr/{srr}.log"
    shell:
         """
        if [ ! -f {output[0]} ] || [ ! -f {output[1]} ]; then
            fastq-dump --gzip --clip --read-filter pass --outdir raw_srr/ --skip-technical --split-3 {input} > {log} 2>&1 
        fi
        """


rule single_fastqdump:
    input:
        "raw_srr/{srr}.sra"
    output:
       "raw_srr/{srr}_pass.fastq.gz"
    log:
        "raw_srr/{srr}.log"
    shell:
          """
        if [ ! -f {output} ]; then
            fastq-dump --gzip --clip --read-filter pass --outdir raw_srr/ --skip-technical --split-3 {input} > {log} 2>&1 
        fi
        """

rule paired_reads_qc:
    input:
        fq1 = "raw_srr/{srr}_pass_1.fastq.gz",
        fq2 = "raw_srr/{srr}_pass_2.fastq.gz",
    output:
        expand("qc_reads/{{srr}}/QC{ext}", ext=[".1.trimmed.fastq", ".2.trimmed.fastq"])
    params:
        dir="qc_reads/{srr}"
    threads: 28
    run:
        shell("FaQCs -min_L 50 -n 50 -t {threads} -d {params.dir} -1 {input.fq1} -2 {input.fq2}")

rule single_reads_qc:
    input:
        fq = "raw_srr/{srr}_pass.fastq.gz"
    output:
        "qc_reads/{srr}/QC.unpaired.trimmed.fastq"
    params:
        dir="qc_reads/{srr}"
    threads: 28
    run:
        shell("FaQCs -min_L 50 -n 50 -t {threads} -d {params.dir} -u {input.fq}")

rule paired_read_map:
    input:
        fq1 = "qc_reads/{srr}/QC.1.trimmed.fastq",
        fq2 = "qc_reads/{srr}/QC.2.trimmed.fastq",
    output:
         "unmapped_reads/{srr}_paired.fastq"
    params:
        idx = "/panfs/biopan04/scratch-migun/ANTIVIRAL-TARGETS/data/grcmmul10_macmul/genome"
    threads: 28
    shell:
        "hisat2 -p {threads} -x {params.idx} -1 {input.fq1} -2 {input.fq2} |  samtools view -b -f 4 -o {output} "


rule single_read_map:
    input:
        fq = "qc_reads/{srr}/QC.unpaired.trimmed.fastq",
    output:
         "unmapped_reads/{srr}_unpaired.fastq"
    params:
        idx = "/panfs/biopan04/scratch-migun/ANTIVIRAL-TARGETS/data/grcmmul10_macmul/genome"
    threads: 28
    shell:
        "hisat2 -p {threads} -x {params.idx} -U {input.fq} |  samtools view -b -f 4 -o {output} "


# rule single_fcount_genes:
#     input:
#         "mapped_reads/{srr}_unpaired.bam"
#     output:
#         "fcount_dir/{srr}_unpaired_fcount.tsv"
#     params:
#         gtf = "/panfs/biopan04/scratch-migun/ANTIVIRAL-TARGETS/data/genome.gtf"
#     shell:
#         "featureCounts -a {params.gtf} -s 0 -g gene_id -t gene -o {output} {input}"

# rule fcount_genes:
#     input:
#         "mapped_reads/{srr}_paired.bam"
#     output:
#         "fcount_dir/{srr}_gene_fcount.tsv"
#     params:
#         gtf = "/panfs/biopan04/scratch-migun/ANTIVIRAL-TARGETS/data/genome.gtf"
#     shell:
#         "featureCounts -a {params.gtf} -g gene_id -t gene -o {output} {input}"

# rule calc_tpm:
#     input:
#         "fcount_dir/{srr}_gene_fcount.tsv"
#     output:
#         "tpms/{srr}_gene_tpm.tsv"
#     shell:
#         "python /panfs/biopan04/scratch-migun/ANTIVIRAL-TARGETS/scripts/rna-score-calc.py tpm -i {input} -o {output}"

# rule single_calc_tpm:
#     input:
#         "fcount_dir/{srr}_unpaired_fcount.tsv"
#     output:
#         "tpms/{srr}_unpaired_tpm.tsv"
#     shell:
#         "python /panfs/biopan04/scratch-migun/ANTIVIRAL-TARGETS/scripts/rna-score-calc.py tpm -i {input} -o {output}"

# # Replace full path with YML files
